package ui;

import java.util.List;

import javax.swing.JSplitPane;
import javax.swing.table.DefaultTableModel;

import facade.DataFacade;
import model.Person;

public class ViewPatientDetails extends javax.swing.JPanel {

	/**
	 * Creates new form ViewPatientDetails
	 */
	JSplitPane splitPane;
	DataFacade dataFacade;

	public ViewPatientDetails(JSplitPane splitPane, DataFacade dataFacade) {
		initComponents();
		this.splitPane = splitPane;
		this.dataFacade = dataFacade;
		populateTable();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		tblPatientDetails = new javax.swing.JTable();
		btnViewDetails = new javax.swing.JButton();

		tblPatientDetails
				.setModel(new javax.swing.table.DefaultTableModel(
						new Object[][] { { null, null, null, null }, { null, null, null, null },
								{ null, null, null, null }, { null, null, null, null } },
						new String[] { "Sr No.", "First Name", "Last Name", "Cost" }) {
					Class[] types = new Class[] { java.lang.String.class, java.lang.String.class,
							java.lang.String.class, java.lang.String.class };
					boolean[] canEdit = new boolean[] { false, false, false, false };

					public Class getColumnClass(int columnIndex) {
						return types[columnIndex];
					}

					public boolean isCellEditable(int rowIndex, int columnIndex) {
						return canEdit[columnIndex];
					}
				});
		jScrollPane1.setViewportView(tblPatientDetails);

		btnViewDetails.setText("View Details");
		btnViewDetails.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnViewDetailsActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addGap(91, 91, 91)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 643,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(btnViewDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 187,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addContainerGap(106, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addGap(64, 64, 64)
						.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 299,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(18, 18, 18).addComponent(btnViewDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 39,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(60, Short.MAX_VALUE)));
	}// </editor-fold>

	private void btnViewDetailsActionPerformed(java.awt.event.ActionEvent evt) {
		// GETS SELECTED ROW FROM TABLE, PERFORM ACTION ACCORDINGLY
		int selectedIndex = tblPatientDetails.getSelectedRow();

		if (selectedIndex < 0) {
			System.out.println("error");
		}

		String firstName = (String) tblPatientDetails.getValueAt(selectedIndex, 2);
		String lastName = (String) tblPatientDetails.getValueAt(selectedIndex, 3);

		Person p = dataFacade.verifyUser(firstName, lastName);

		// logic to get data
//         Person p = (Person) tblPatientDetails.getValueAt(selectedIndex, 1);

		PatientDetails pd = new PatientDetails(splitPane, p);
		splitPane.setRightComponent(pd);
	}

	// Variables declaration - do not modify
	private javax.swing.JButton btnViewDetails;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTable tblPatientDetails;
	// End of variables declaration

	private void populateTable() {

		DefaultTableModel model = (DefaultTableModel) tblPatientDetails.getModel();
		model.setRowCount(0);
		int count = 1;
		List<Person> list = dataFacade.readData();

		for (Person p : list) {
			Object[] row = new Object[7];
			row[0] = "" + count++;
			row[1] = p.getId();
			row[2] = p.getFirstName();
			row[3] = p.getLastName();
			row[4] = p.getMedicalBill().getCost();

			model.addRow(row);
		}
	}
}
